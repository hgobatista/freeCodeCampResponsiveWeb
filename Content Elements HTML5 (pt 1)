HTML5 introduced several new elements that
give developers more options while also
incorporating accessibility features. These tags
include |main|, |header|, |footer|, |nav|,
|article|, and |section|, among others.

By default, a browser renders these elements
similar to the humble |div|. However, using
them where appropriate gives additional
meaning to your markup. The tag name alone
can indicate the type of information it contains,
which adds semantic meaning to that content.
Assistive technologies can access this
information to provide better page summary or
navigation options to their users.

The |main| element is used to wrap (you
guessed it) the main content, and there should
be only one per page. It's meant to surround
the information related to your page's central
topic. It's not meant to include items that
repeat across pages, like navigation links or
banners.

The |main| tag also has an embedded landmark
feature that assistive technology can use to 
navigate to the main content quickly. If you've
ever seen a "Jump to Main Content" link at the
top of a page, using the |main| tag automatically
gives assistive devices that functionality.

_____________________________________________________

------ Wrap Content in the Article Element

|article| is another one of the new HTML5
elements that add semantic meaning to your
markup. |article| is a sectioning element and
is used to wrap independent, self-contained
content. The tag works well with blog entries,
forum posts, or new articles.

Determining whether content can stand alone
is usually a judgment call, but you can use a
couple of simple tests. Ask yourself if you
removed all surrounding context, would that
content still make sense? Similarly, for text,
would the content hold up if it were in an RSS
feed?

Remember that folks using assistive
technologies rely on organized, semantically
meaningful markup to better understand your
work.

Note: The |section| element is also new with
HTML5, and has a slightly different semantic
meaning than |article|. An |article| is for
standalone content, and a |section| is for
groping thematically related content. They
can be used within each other, as needed. For
example, if a book is the |article|, then each
chapter is a |section|. When there's no
relationship between groups of content, then
use a |div|.

|<div>| - groups content
|<section>| - groups related
|<article>| - groups
independent, self-contained content.
_____________________________________________________

------ Make screen reader navigation 
       easier with the <header> landmark
       

The next HTML5 element that adds semantic
meaning and improves accessibility is the
|header| tag. It's used to wrap introductory
information or navigation links for its parent
tag and works well around content that's
repeated at the top on multiple pages.

|headerZ shares the embedded landmark
feature you saw with |main|, allowing assistive
technologies to quickly navigate to that
content.

Note: The |header| is meant for use in the
|body| tag of your HTML document. It is
different than the |head| element, which
contais the page's title, meta information, etc.

_____________________________________________________

------ Make screen reader navigation
       easier with the <nav> landmark

The |nav| element is another HTML5 item with
the embedded landmark feature for easy
screen reader navigation. This tag is meant to
wrap around the main navigation links in your
page.

If there are repeated site links at the bottom of
the page, it isn't necessary to markup those
with a |nav| tag as well. Using a |footer|
(covered in the next challenge) in sufficient.

_____________________________________________________

------ Make screen reader navigation
       easier with the <footer> landmark

Similar to |header| and |nav|, the |footer|
element has a built-in landmark feature that
allows assistive devices to quickly navigate to
it. It's primarily used to contain copyright
information or links to related documents that
usually sit at the bottom of a page.

_____________________________________________________

------ Improve accessibility of Audio
       Content with the <audio> element

HTML5's |audio| element gives semantic
meaning when it wraps sound or audio stream
content in your markup. Audio content also
needs a text alternative to be accessible to
people who are deaf or hard of hearing. This
can be done with nearby text on the page or a
link to a transcript.

The |audio| tag supports the |controls|
attribute. This shows the browser default play,
pause, and others controls, and supports
keyboard functionality. This is a boolean
attribute, meaning it doesn't need a value, its
presence of the tag turns the setting on.

Here's an example:
-----------------------
<audio id="meowClip" controls>
  <source src="audio/meow.mp3" type="audio/mpeg">
  <source src="audio/meow.ogg" tyoe="audio/ogg">
</audio>
-----------------------
Note: Multimedia content usually has both
visual and auditory components. It needs
synchronized captions and a transcript so users
with visual and/or auditory impairments can
access it. Generally, a web developer is not
responsible for creating the captions or
transcript, but needs to know to include them.

_____________________________________________________

------ Improve chart acessibility
       with the <figure> element

HTML5 introduced the |figure| element and
the related |figcaption|. Used together, these
items wrap a visual representation (like an
image, diagram, or chart) along with its caption.
Wrapping these elements together gives a two-
fold accessibility boost by semantically
grouping related content and providing a text
alternativa explaining the |figure|.

For data visualizations like charts, the caption
can be used to briefly note the trends or
conclusions for users with visual impairments.
Another challenge covers how to move a table
version of the chart's data off-screen (using
CSS) for screen reader users.

Here's an example - note that the |figcaption|
goes inside the |figure| tags and can be
combined with other elements:
-----------------------
<figure>
  <img src="roundhouseDestruction.jpeg" alt="Photo of
  a Camper Cat executing a roundhouse kick">
  <br>
  <figcaption>
    Master Camper Cat demonstrates proper form of a
    roundhouse kick.
  </figcaption>
</figure>
-----------------------
_____________________________________________________

------ Improve form field accessibility
       with the <label> element

Improving accessibility with semantic HTML
markup applies to using both appropriate tag
names and attributes. The next several
challenges cover some important scenarios
using attributes in forms.

The |label| tag wraps the text for a specific
form control item, usually the name or label for
a choice. This ties meaning to the item and
makes the form more readable. The |for|
attribute on a |label| tag explicitly associates
that |label| with the form control and is used
by screen readers.

We learned about radio buttons and their
labels in a lesson in the Basic HTML section. In
that lesson, we wrapped the radio button input
element inside a |label| element along with the
label text in order to make the text clickable.
Another way to achieve this is by using the
|for| attribute, as explained in this lesson.

The value of the |for| attribute must be the
same as the value of the |id| attribute of the
form control. Here's an example:
-----------------------
<form>
  <label for="name">Name:</label>
  <input type="text" id="name" name="name">
</form>
-----------------------

